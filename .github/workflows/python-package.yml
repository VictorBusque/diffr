name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel flake8 Cython
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.python-version }}
          path: dist/*

  create_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel flake8 Cython
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Get current version
        id: get_version
        run: |
          # Capture only the last line (the version number)
          VERSION=$(python setup.py --version | tail -n1)
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MINOR=$((VERSION_PARTS[1] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.$MINOR.0"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"v$NEW_VERSION\", \"target_commitish\": \"main\", \"name\": \"v$NEW_VERSION\", \"body\": \"Release $NEW_VERSION\", \"draft\": false, \"prerelease\": false}" \
            https://api.github.com/repos/${{ github.repository }}/releases)
          
          UPLOAD_URL=$(echo $RESPONSE | jq -r .upload_url)
          if [ "$UPLOAD_URL" = "null" ] || [ -z "$UPLOAD_URL" ]; then
            echo "Release creation may have failed; fetching existing release info."
            RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/v$NEW_VERSION)
            UPLOAD_URL=$(echo $RESPONSE | jq -r .upload_url)
          fi
          # Remove the template portion from the URL
          UPLOAD_URL=${UPLOAD_URL%\{*}
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  publish:
    needs: [build, create_release]
    if: github.event_name == 'release' || needs.create_release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Merge build artifacts
        run: |
          mkdir -p final-dist
          find dist -name '*.tar.gz' -exec mv {} final-dist/ \;
          find dist -name '*.whl' -exec mv {} final-dist/ \;

      - name: Create ZIP artifact
        run: |
          zip -j final-release.zip final-dist/*

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_UPLOAD_URL: ${{ github.event.release.upload_url }}
          AUTO_RELEASE_UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
        run: |
          if [ "$EVENT_NAME" != "release" ]; then
            UPLOAD_URL="$AUTO_RELEASE_UPLOAD_URL"
          else
            UPLOAD_URL="$RELEASE_UPLOAD_URL"
          fi
          echo "Uploading final-release.zip to $UPLOAD_URL"
          if [ -z "$UPLOAD_URL" ]; then
            echo "Error: UPLOAD_URL is empty. Exiting."
            exit 1
          fi
          curl --data-binary @"final-release.zip" \
            -H "Content-Type: application/zip" \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            "${UPLOAD_URL}?name=final-release.zip"
