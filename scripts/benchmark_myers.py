# ruff: noqa: E501

import functools
import json
import logging
import statistics
from collections.abc import Callable
from time import perf_counter
from typing import Any

from diffr.core.myers import (
    diff_line,  # noqa: E402
    tokenize,  # noqa: E402
)


def profile_performance(runs: int = 1, show_stats: bool = True):
    """
    Decorate to profile the performance of a function.

    Args:
        runs: Number of times to run the function for averaging
        show_stats: Whether to show detailed statistics

    Returns:
        Decorated function
    """

    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            wrapper.execution_times = []  # Store execution times in the wrapper

            result = None
            for _ in range(runs):
                start_time = perf_counter()
                result = func(*args, **kwargs)
                end_time = perf_counter()
                wrapper.execution_times.append(end_time - start_time)

            if show_stats and runs > 1:
                logging.info(f"\n----- Performance profile for {func.__name__} -----")
                logging.info(f"Total runs: {runs}")
                logging.info(f"Average time: {statistics.mean(wrapper.execution_times):.6f} seconds")
                logging.info(f"Median time: {statistics.median(wrapper.execution_times):.6f} seconds")
                logging.info(f"Min time: {min(wrapper.execution_times):.6f} seconds")
                logging.info(f"Max time: {max(wrapper.execution_times):.6f} seconds")
                if runs > 2:
                    logging.info(f"Std dev: {statistics.stdev(wrapper.execution_times):.6f} seconds")
                logging.info(f"Total time: {sum(wrapper.execution_times):.6f} seconds")
                logging.info("---------------------------------------------")
            else:
                logging.info(f"{func.__name__} executed in {wrapper.execution_times[0]:.6f} seconds")

            return result

        return wrapper

    return decorator


CODE_OLD_0 = "config = {'user': user.get('name', 'guest'), 'permissions': set(['read', 'write', 'execute']), 'limits': {'cpu': max(1, cpu_limit or 0), 'mem': min(mem_limit, 8192)}, 'features': [f for f in feature_flags if f.startswith('beta_')], 'timeout': 60 if env == 'prod' else 300, 'logging': {'level': 'debug' if debug else 'info', 'rotate': True, 'path': '/var/log/app.log'}, 'network': {'retries': 3, 'backoff': 2.0, 'proxies': proxies.get(region, {})}, 'hooks': lambda event: [hook(event) for hook in registered_hooks if callable(hook)], 'auth': {'method': 'oauth2', 'token': get_token() if use_token else None}, 'locale': locale or 'en_US'}"
CODE_NEW_0 = "config = {'user': user.get('username', 'anonymous'), 'permissions': {'read', 'write'}, 'limits': {'cpu': max(2, cpu_limit or 1), 'mem': min(mem_limit, 4096)}, 'features': [flag for flag in feature_flags if 'beta' in flag], 'timeout': 120 if env in ['prod', 'stage'] else 240, 'logging': {'level': 'info' if not verbose else 'debug', 'rotate': False, 'path': '/tmp/app.log'}, 'network': {'retries': 5, 'backoff': 1.5, 'proxies': get_proxies(region)}, 'hooks': lambda event: [fn(event) for fn in hooks if callable(fn)], 'auth': {'method': 'apikey', 'token': None}, 'locale': get_locale() or 'en_GB'}"

# Updated tokens to include separators as part of the tokenization
EXPECTED_TOKENS_0 = [
    "config",
    " ",
    "=",
    " ",
    "{",
    "'",
    "user",
    "'",
    ":",
    " ",
    "user",
    ".",
    "get",
    "(",
    "'",
    "name",
    "'",
    ",",
    " ",
    "'",
    "guest",
    "'",
    ")",
    ",",
    " ",
    "'",
    "permissions",
    "'",
    ":",
    " ",
    "set",
    "(",
    "[",
    "'",
    "read",
    "'",
    ",",
    " ",
    "'",
    "write",
    "'",
    ",",
    " ",
    "'",
    "execute",
    "'",
    "]",
    ")",
    ",",
    " ",
    "'",
    "limits",
    "'",
    ":",
    " ",
    "{",
    "'",
    "cpu",
    "'",
    ":",
    " ",
    "max",
    "(",
    "1",
    ",",
    " ",
    "cpu_limit",
    " ",
    "or",
    " ",
    "0",
    ")",
    ",",
    " ",
    "'",
    "mem",
    "'",
    ":",
    " ",
    "min",
    "(",
    "mem_limit",
    ",",
    " ",
    "8192",
    ")",
    "}",
    ",",
    " ",
    "'",
    "features",
    "'",
    ":",
    " ",
    "[",
    "f",
    " ",
    "for",
    " ",
    "f",
    " ",
    "in",
    " ",
    "feature_flags",
    " ",
    "if",
    " ",
    "f",
    ".",
    "startswith",
    "(",
    "'",
    "beta_",
    "'",
    ")",
    "]",
    ",",
    " ",
    "'",
    "timeout",
    "'",
    ":",
    " ",
    "60",
    " ",
    "if",
    " ",
    "env",
    " ",
    "==",
    " ",
    "'",
    "prod",
    "'",
    " ",
    "else",
    " ",
    "300",
    ",",
    " ",
    "'",
    "logging",
    "'",
    ":",
    " ",
    "{",
    "'",
    "level",
    "'",
    ":",
    " ",
    "'",
    "debug",
    "'",
    " ",
    "if",
    " ",
    "debug",
    " ",
    "else",
    " ",
    "'",
    "info",
    "'",
    ",",
    " ",
    "'",
    "rotate",
    "'",
    ":",
    " ",
    "True",
    ",",
    " ",
    "'",
    "path",
    "'",
    ":",
    " ",
    "'",
    "/var/log/app.log",
    "'",
    "}",
    ",",
    " ",
    "'",
    "network",
    "'",
    ":",
    " ",
    "{",
    "'",
    "retries",
    "'",
    ":",
    " ",
    "3",
    ",",
    " ",
    "'",
    "backoff",
    "'",
    ":",
    " ",
    "2.0",
    ",",
    " ",
    "'",
    "proxies",
    "'",
    ":",
    " ",
    "proxies",
    ".",
    "get",
    "(",
    "region",
    ",",
    " ",
    "{",
    "}",
    ")",
    "}",
    ",",
    " ",
    "'",
    "hooks",
    "'",
    ":",
    " ",
    "lambda",
    " ",
    "event",
    ":",
    " ",
    "[",
    "hook",
    "(",
    "event",
    ")",
    " ",
    "for",
    " ",
    "hook",
    " ",
    "in",
    " ",
    "registered_hooks",
    " ",
    "if",
    " ",
    "callable",
    "(",
    "hook",
    ")",
    "]",
    ",",
    " ",
    "'",
    "auth",
    "'",
    ":",
    " ",
    "{",
    "'",
    "method",
    "'",
    ":",
    " ",
    "'",
    "oauth2",
    "'",
    ",",
    " ",
    "'",
    "token",
    "'",
    ":",
    " ",
    "get_token",
    "(",
    ")",
    " ",
    "if",
    " ",
    "use_token",
    " ",
    "else",
    " ",
    "None",
    "}",
    ",",
    " ",
    "'",
    "locale",
    "'",
    ":",
    " ",
    "locale",
    " ",
    "or",
    " ",
    "'",
    "en_US",
    "'",
    "}",
    "config",
    " ",
    "=",
    " ",
    "{",
    "'",
    "user",
    "'",
    ":",
    " ",
    "user",
    ".",
    "get",
    "(",
    "'",
    "username",
    "'",
    ",",
    " ",
    "'",
    "anonymous",
    "'",
    ")",
    ",",
    " ",
    "'",
    "permissions",
    "'",
    ":",
    " ",
    "{",
    "'",
    "read",
    "'",
    ",",
    " ",
    "'",
    "write",
    "'",
    "}",
    ",",
    " ",
    "'",
    "limits",
    "'",
    ":",
    " ",
    "{",
    "'",
    "cpu",
    "'",
    ":",
    " ",
    "max",
    "(",
    "2",
    ",",
    " ",
    "cpu_limit",
    " ",
    "or",
    " ",
    "1",
    ")",
    ",",
    " ",
    "'",
    "mem",
    "'",
    ":",
    " ",
    "min",
    "(",
    "mem_limit",
    ",",
    " ",
    "4096",
    ")",
    "}",
    ",",
    " ",
    "'",
    "features",
    "'",
    ":",
    " ",
    "[",
    "flag",
    " ",
    "for",
    " ",
    "flag",
    " ",
    "in",
    " ",
    "feature_flags",
    " ",
    "if",
    " ",
    "'",
    "beta",
    "'",
    " ",
    "in",
    " ",
    "flag",
    "]",
    ",",
    " ",
    "'",
    "timeout",
    "'",
    ":",
    " ",
    "120",
    " ",
    "if",
    " ",
    "env",
    " ",
    "in",
    " ",
    "[",
    "'",
    "prod",
    "'",
    ",",
    " ",
    "'",
    "stage",
    "'",
    "]",
    " ",
    "else",
    " ",
    "240",
    ",",
    " ",
    "'",
    "logging",
    "'",
    ":",
    " ",
    "{",
    "'",
    "level",
    "'",
    ":",
    " ",
    "'",
    "info",
    "'",
    " ",
    "if",
    " ",
    "not",
    " ",
    "verbose",
    " ",
    "else",
    " ",
    "'",
    "debug",
    "'",
    ",",
    " ",
    "'",
    "rotate",
    "'",
    ":",
    " ",
    "False",
    ",",
    " ",
    "'",
    "path",
    "'",
    ":",
    " ",
    "'",
    "/tmp/app.log",
    "'",
    "}",
    ",",
    " ",
    "'",
    "network",
    "'",
    ":",
    " ",
    "{",
    "'",
    "retries",
    "'",
    ":",
    " ",
    "5",
    ",",
    " ",
    "'",
    "backoff",
    "'",
    ":",
    " ",
    "1.5",
    ",",
    " ",
    "'",
    "proxies",
    "'",
    ":",
    " ",
    "get_proxies",
    "(",
    "region",
    ")",
    "}",
    ",",
    " ",
    "'",
    "hooks",
    "'",
    ":",
    " ",
    "lambda",
    " ",
    "event",
    ":",
    " ",
    "[",
    "fn",
    "(",
    "event",
    ")",
    " ",
    "for",
    " ",
    "fn",
    " ",
    "in",
    " ",
    "hooks",
    " ",
    "if",
    " ",
    "callable",
    "(",
    "fn",
    ")",
    "]",
    ",",
    " ",
    "'",
    "auth",
    "'",
    ":",
    " ",
    "{",
    "'",
    "method",
    "'",
    ":",
    " ",
    "'",
    "apikey",
    "'",
    ",",
    " ",
    "'",
    "token",
    "'",
    ":",
    " ",
    "None",
    "}",
    ",",
    " ",
    "'",
    "locale",
    "'",
    ":",
    " ",
    "get_locale",
    "(",
    ")",
    " ",
    "or",
    " ",
    "'",
    "en_GB",
    "'",
    "}",
]

# Updated diffs to include separators
EXPECTED_DIFF_0 = [
    ("equal", "config"),
    ("equal", " "),
    ("equal", "="),
    ("equal", " "),
    ("equal", "{"),
    ("equal", "'"),
    ("equal", "user"),
    ("equal", "'"),
    ("equal", ":"),
    ("equal", " "),
    ("equal", "user"),
    ("equal", "."),
    ("equal", "get"),
    ("equal", "("),
    ("equal", "'"),
    ("delete", "name"),
    ("insert", "username"),
    ("equal", "'"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "'"),
    ("delete", "guest"),
    ("insert", "anonymous"),
    ("equal", "'"),
    ("equal", ")"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "'"),
    ("equal", "permissions"),
    ("equal", "'"),
    ("equal", ":"),
    ("equal", " "),
    ("delete", "set"),
    ("delete", "("),
    ("delete", "["),
    ("insert", "{"),
    ("equal", "'"),
    ("equal", "read"),
    ("equal", "'"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "'"),
    ("equal", "write"),
    ("equal", "'"),
    ("insert", "}"),
    ("delete", ","),
    ("delete", " "),
    ("delete", "'"),
    ("delete", "execute"),
    ("delete", "'"),
    ("delete", "]"),
    ("delete", ")"),
    # ...and so on with the updated diff that includes separators
]

CODE_OLD_1 = 'result = process_data(user_id=123, data=fetch_data("https://api.example.com/data"), retries=3, timeout=30, verbose=True)'
CODE_NEW_1 = 'result = process_data(user_id=123, data=fetch_data("https://api.example.com/archived"), retries=5, timeout=20, verbose=False)'

# Updated with separators included
EXPECTED_TOKENS_1 = [
    "result",
    " ",
    "=",
    " ",
    "process_data",
    "(",
    "user_id",
    "=",
    "123",
    ",",
    " ",
    "data",
    "=",
    "fetch_data",
    "(",
    '"',
    "https://api.example.com/data",
    '"',
    ")",
    ",",
    " ",
    "retries",
    "=",
    "3",
    ",",
    " ",
    "timeout",
    "=",
    "30",
    ",",
    " ",
    "verbose",
    "=",
    "True",
    ")",
    "result",
    " ",
    "=",
    " ",
    "process_data",
    "(",
    "user_id",
    "=",
    "123",
    ",",
    " ",
    "data",
    "=",
    "fetch_data",
    "(",
    '"',
    "https://api.example.com/archived",
    '"',
    ")",
    ",",
    " ",
    "retries",
    "=",
    "5",
    ",",
    " ",
    "timeout",
    "=",
    "20",
    ",",
    " ",
    "verbose",
    "=",
    "False",
    ")",
]

# Updated with separators included
EXPECTED_DIFF_1 = [
    ("equal", "result"),
    ("equal", " "),
    ("equal", "="),
    ("equal", " "),
    ("equal", "process_data"),
    ("equal", "("),
    ("equal", "user_id"),
    ("equal", "="),
    ("equal", "123"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "data"),
    ("equal", "="),
    ("equal", "fetch_data"),
    ("equal", "("),
    ("equal", '"'),
    ("delete", "https://api.example.com/data"),
    ("insert", "https://api.example.com/archived"),
    ("equal", '"'),
    ("equal", ")"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "retries"),
    ("equal", "="),
    ("delete", "3"),
    ("insert", "5"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "timeout"),
    ("equal", "="),
    ("delete", "30"),
    ("insert", "20"),
    ("equal", ","),
    ("equal", " "),
    ("equal", "verbose"),
    ("equal", "="),
    ("delete", "True"),
    ("insert", "False"),
    ("equal", ")"),
]


RUNS = 10000


def run_test(func: Callable, code_old: str, code_new: str):
    """Run a test case and print the results."""
    profiled_lambda = profile_performance(runs=RUNS)(func)

    try:
        result = profiled_lambda(code_old, code_new)
        n_tokens = len(result)
        avg_time = statistics.mean(profiled_lambda.execution_times)
        lines_per_second = n_tokens / avg_time
        logging.info("n_tokens: %d", n_tokens)
        logging.info("n_tokens per second: %.2fM/s", lines_per_second / 1_000_000)
        return avg_time, result
    except Exception as e:
        logging.error("Can't run the implementation: %s", e)
        raise


# Example of direct use with a lambda
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    def tokenize_func(old: str, new: str) -> list[str]:
        """Tokenize the old and new code snippets."""
        tokens1 = tokenize(old)
        tokens2 = tokenize(new)
        return tokens1 + tokens2

    def diff_func(old: str, new: str) -> str:
        """Diff the old and new code snippets."""
        diff = diff_line(old, new)
        return diff

    tokenize_time, tokens = run_test(tokenize_func, CODE_OLD_0, CODE_NEW_0)

    logging.info("Tokenize time: %.6f", tokenize_time)
    logging.info("Tokens match: %s", "✅" if tokens == EXPECTED_TOKENS_0 else "❌")

    if not tokens == EXPECTED_TOKENS_0:
        logging.info("Tokens: %s", json.dumps(tokens))
        logging.info("Expected: %s", json.dumps(EXPECTED_TOKENS_0))

    diff_time, diff = run_test(diff_func, CODE_OLD_0, CODE_NEW_0)

    logging.info("Diff time: %.6f", diff_time)
    expected = [[first, second] for first, second in EXPECTED_DIFF_0]
    any_match = diff == expected or diff == EXPECTED_DIFF_0
    logging.info("Matches expected: %s", "✅" if any_match else "❌")

    tokenize_time, tokens = run_test(tokenize_func, CODE_OLD_1, CODE_NEW_1)

    logging.info("Tokenize time: %.6f", tokenize_time)
    logging.info("Tokens match: %s", "✅" if tokens == EXPECTED_TOKENS_1 else "❌")

    if not tokens == EXPECTED_TOKENS_1:
        logging.info("Tokens: %s", json.dumps(tokens))
        logging.info("Expected: %s", json.dumps(EXPECTED_TOKENS_1))

    diff_time, diff = run_test(diff_func, CODE_OLD_1, CODE_NEW_1)

    logging.info("Diff time: %.6f", diff_time)
    expected = [[first, second] for first, second in EXPECTED_DIFF_1]
    any_match = diff == expected or diff == EXPECTED_DIFF_1
    logging.info("Matches expected: %s", "✅" if any_match else "❌")

    if not any_match:
        logging.info("Diff: %s", json.dumps(diff))
        logging.info("Expected: %s", json.dumps(EXPECTED_DIFF_1))
